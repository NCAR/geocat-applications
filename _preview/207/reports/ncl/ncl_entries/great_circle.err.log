Traceback (most recent call last):
  File "/home/runner/micromamba/envs/geocat-applications/lib/python3.13/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "/home/runner/micromamba/envs/geocat-applications/lib/python3.13/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/home/runner/micromamba/envs/geocat-applications/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "/home/runner/micromamba/envs/geocat-applications/lib/python3.13/asyncio/base_events.py", line 719, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "/home/runner/micromamba/envs/geocat-applications/lib/python3.13/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "/home/runner/micromamba/envs/geocat-applications/lib/python3.13/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/runner/micromamba/envs/geocat-applications/lib/python3.13/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Convert latitude and longitude points to Cartesian Points (see: css2c)
def latlon_to_cart(lat, lon):
    from astropy.coordinates.representation import UnitSphericalRepresentation
    from astropy import units

    spherical_coords = UnitSphericalRepresentation(
        lat=lat * units.deg, lon=lon * units.deg
    )
    cart_coords = spherical_coords.to_cartesian()
    return np.array([cart_coords.x, cart_coords.y, cart_coords.z])


pt_within = latlon_to_cart(40.0150, -105.2705)  # Boulder
vertex_a = latlon_to_cart(50.0150, -105.2705)
vertex_b = latlon_to_cart(30.0150, -105.2705)

# Determine if point lies along great circle arc
from uxarray.grid.arcs import point_within_gca

point_within_gca(pt_within, vertex_a, vertex_b)
------------------


[31m---------------------------------------------------------------------------[39m
[31mModuleNotFoundError[39m                       Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[4][39m[32m, line 18[39m
[32m     15[39m vertex_b = latlon_to_cart([32m30.0150[39m, -[32m105.2705[39m)
[32m     17[39m [38;5;66;03m# Determine if point lies along great circle arc[39;00m
[32m---> [39m[32m18[39m [38;5;28;01mfrom[39;00m[38;5;250m [39m[34;01muxarray[39;00m[34;01m.[39;00m[34;01mgrid[39;00m[34;01m.[39;00m[34;01marcs[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m point_within_gca
[32m     20[39m point_within_gca(pt_within, vertex_a, vertex_b)

[31mModuleNotFoundError[39m: No module named 'uxarray'

